import numpy as np
from scipy.optimize import leastsq
from pylab import *

def fitting(deltan, origtau):

    # def f(params):
    #     lntaup=params[0]
    #     lntaun=params[1]
    #     Et=params[2]
    #     Ev=0.0
    #     Ec=1.14*1.6E-19
    #     kT=4.11E-21
    #     Nc=2.8430E19
    #     Nv=2.6821E19
    #     NA=8.26E15
        
    #     return (origtau) - (((((10**lntaup)*(Nc * np.exp((-1*(Ec-Et))/kT) + deltan)) + (10**lntaun)*((Nv*np.exp((-1*(Et-Ev))/kT)) + NA + deltan)))/(NA + deltan))

    def f(params):
        #C1=params[0]
        #C2=params[1]
        #C0=params[2]
        #NA=params[2]
        #NA=8.225E15
        #return origtau - ((C0*(deltan**2))+(C1*deltan)+C2)
        #return origtau - (((C0**2)*sqrt((deltan**2)-(C1**2)))+(C2**2))
        #return origtau - ((C1+(C2*deltan))/(NA+deltan))

        taup=params[0]
        taun=params[1]
        n1=params[2]
        p1=params[3]
        NA=params[4]
        return origtau - (((taup*n1)+(taup*deltan)+(taun*p1)+(taun*NA)+(taun*deltan))/(NA+deltan))

    #startguess=np.array([1e-4,1e-5,8.225e15],np.float64)
    startguess=np.array([1.72e-3,1e-2,1.22E2,9e1,2e15],np.float64)
    #startguess=np.array([1e-3,1e-2, 1e-2],np.float64)
    #startguess=np.array([-3.76,-4,1.6e-20],np.float64)
    
    calculation=leastsq(f, startguess)
    return calculation

#deltan=np.array([3.02E+15,2.84E+15,2.67E+15,2.51E+15,2.36E+15,2.22E+15,2.08E+15,1.96E+15,1.84E+15,1.72E+15,1.62E+15,1.52E+15,1.43E+15,1.34E+15,1.25E+15,1.18E+15,1.11E+15,1.04E+15,9.78E+14,9.15E+14,8.60E+14,8.12E+14,7.60E+14,7.17E+14,6.75E+14,6.39E+14,6.01E+14,5.65E+14,5.31E+14,5.00E+14,4.70E+14,4.45E+14,4.22E+14,3.95E+14,3.76E+14,3.50E+14,3.34E+14,3.14E+14,2.94E+14,2.82E+14,2.66E+14,2.52E+14,2.37E+14,2.25E+14,2.15E+14,2.03E+14,1.95E+14,1.84E+14,1.75E+14,1.68E+14,1.58E+14,1.53E+14,1.46E+14,1.37E+14,1.28E+14,1.25E+14,1.19E+14,1.14E+14,1.09E+14,1.07E+14,1.01E+14,9.72E+13,9.39E+13,9.12E+13,8.60E+13,8.29E+13,8.08E+13,7.48E+13,7.07E+13,6.33E+13,6.53E+13,6.02E+13,5.76E+13,5.60E+13,5.37E+13,5.16E+13,4.75E+13,4.81E+13,4.56E+13,4.18E+13,4.14E+13,4.04E+13,3.80E+13,3.81E+13,3.57E+13,3.36E+13,3.27E+13,3.60E+13,3.17E+13,3.23E+13,3.32E+13,3.32E+13,3.30E+13,2.75E+13,3.08E+13,2.80E+13,2.67E+13,2.67E+13,2.67E+13,2.54E+13,2.19E+13,2.06E+13,1.87E+13,1.61E+13,1.63E+13,1.74E+13,1.77E+13,1.53E+13,1.48E+13,1.59E+13,1.30E+13,1.83E+13,1.56E+13,1.33E+13,1.44E+13,1.08E+13,1.35E+13], np.float64)

#origtau=np.array([1.28E-05,1.27E-05,1.25E-05,1.24E-05,1.23E-05,1.21E-05,1.20E-05,1.19E-05,1.18E-05,1.16E-05,1.15E-05,1.14E-05,1.13E-05,1.11E-05,1.10E-05,1.09E-05,1.07E-05,1.06E-05,1.05E-05,1.03E-05,1.02E-05,1.01E-05,9.97E-06,9.89E-06,9.77E-06,9.72E-06,9.60E-06,9.46E-06,9.33E-06,9.23E-06,9.10E-06,9.03E-06,8.98E-06,8.81E-06,8.80E-06,8.58E-06,8.59E-06,8.44E-06,8.28E-06,8.33E-06,8.21E-06,8.15E-06,8.03E-06,7.96E-06,7.98E-06,7.89E-06,7.91E-06,7.80E-06,7.76E-06,7.78E-06,7.69E-06,7.74E-06,7.77E-06,7.61E-06,7.44E-06,7.56E-06,7.53E-06,7.54E-06,7.55E-06,7.69E-06,7.64E-06,7.65E-06,7.71E-06,7.83E-06,7.69E-06,7.74E-06,7.88E-06,7.62E-06,7.53E-06,7.04E-06,7.57E-06,7.30E-06,7.28E-06,7.40E-06,7.41E-06,7.42E-06,7.13E-06,7.53E-06,7.47E-06,7.12E-06,7.38E-06,7.53E-06,7.38E-06,7.75E-06,7.57E-06,7.43E-06,7.55E-06,8.69E-06,7.98E-06,8.47E-06,9.08E-06,9.44E-06,9.81E-06,8.56E-06,9.99E-06,9.49E-06,9.39E-06,9.76E-06,1.02E-05,1.01E-05,9.05E-06,8.92E-06,8.41E-06,7.58E-06,7.98E-06,8.89E-06,9.38E-06,8.49E-06,8.54E-06,9.56E-06,8.18E-06,1.20E-05,1.07E-05,9.46E-06,1.07E-05,8.35E-06,1.09E-05], np.float64)

#Crap data below
#deltan=np.array([3.91E+15,3.76E+15,3.62E+15,3.47E+15,3.32E+15,3.18E+15,3.05E+15,2.91E+15,2.78E+15,2.66E+15,2.54E+15,2.43E+15,2.32E+15,2.21E+15,2.11E+15,2.02E+15,1.93E+15,1.84E+15,1.75E+15,1.68E+15,1.60E+15,1.53E+15,1.46E+15,1.39E+15,1.33E+15,1.27E+15,1.22E+15,1.16E+15,1.11E+15,1.06E+15,1.02E+15,9.70E+14,9.30E+14,8.87E+14,8.49E+14,8.13E+14,7.77E+14,7.44E+14,7.12E+14,6.81E+14,6.53E+14,6.24E+14,6.00E+14,5.75E+14,5.50E+14,5.24E+14,5.06E+14,4.85E+14,4.65E+14,4.45E+14,4.26E+14,4.08E+14,3.93E+14,3.77E+14,3.60E+14,3.47E+14,3.32E+14,3.22E+14,3.08E+14,2.95E+14,2.87E+14,2.74E+14,2.66E+14,2.59E+14,2.47E+14,2.40E+14,2.29E+14,2.20E+14,2.11E+14,2.04E+14,1.99E+14,1.91E+14,1.84E+14,1.78E+14,1.71E+14,1.66E+14,1.61E+14,1.56E+14,1.49E+14,1.42E+14,1.39E+14,1.34E+14,1.29E+14,1.23E+14,1.19E+14,1.14E+14,1.10E+14,1.06E+14,1.02E+14,9.94E+13,9.66E+13,9.38E+13,9.20E+13,8.93E+13,8.73E+13,8.49E+13,8.41E+13,7.94E+13,7.76E+13,7.51E+13,7.42E+13,7.06E+13,6.70E+13,6.52E+13,6.58E+13,6.30E+13,6.03E+13,5.84E+13,5.60E+13,5.34E+13,5.26E+13,5.05E+13,4.89E+13,4.81E+13,4.54E+13,4.32E+13,4.25E+13], np.float64)
#origtau=np.array([5.08E-05,5.14E-05,5.19E-05,5.24E-05,5.28E-05,5.32E-05,5.36E-05,5.39E-05,5.43E-05,5.46E-05,5.49E-05,5.52E-05,5.54E-05,5.56E-05,5.58E-05,5.61E-05,5.62E-05,5.64E-05,5.65E-05,5.68E-05,5.69E-05,5.71E-05,5.72E-05,5.73E-05,5.75E-05,5.76E-05,5.78E-05,5.80E-05,5.81E-05,5.82E-05,5.82E-05,5.83E-05,5.85E-05,5.85E-05,5.86E-05,5.87E-05,5.88E-05,5.89E-05,5.90E-05,5.91E-05,5.92E-05,5.92E-05,5.95E-05,5.97E-05,5.96E-05,5.93E-05,5.98E-05,6.00E-05,6.02E-05,6.00E-05,6.01E-05,6.01E-05,6.05E-05,6.06E-05,6.02E-05,6.07E-05,6.06E-05,6.13E-05,6.11E-05,6.12E-05,6.20E-05,6.17E-05,6.25E-05,6.31E-05,6.28E-05,6.36E-05,6.31E-05,6.32E-05,6.33E-05,6.38E-05,6.49E-05,6.48E-05,6.49E-05,6.56E-05,6.54E-05,6.64E-05,6.67E-05,6.75E-05,6.73E-05,6.69E-05,6.79E-05,6.84E-05,6.85E-05,6.77E-05,6.82E-05,6.83E-05,6.81E-05,6.83E-05,6.87E-05,6.94E-05,7.01E-05,7.11E-05,7.25E-05,7.31E-05,7.43E-05,7.51E-05,7.77E-05,7.64E-05,7.79E-05,7.86E-05,8.07E-05,8.01E-05,7.91E-05,8.03E-05,8.47E-05,8.45E-05,8.45E-05,8.50E-05,8.57E-05,8.50E-05,8.72E-05,8.81E-05,8.93E-05,9.19E-05,9.02E-05,9.08E-05,9.36E-05], np.float64)

origtau=np.array([1.82E-05,1.81E-05,1.81E-05,1.80E-05,1.79E-05,1.78E-05,1.77E-05,1.75E-05,1.74E-05,1.73E-05,1.71E-05,1.70E-05,1.69E-05,1.68E-05,1.66E-05,1.65E-05,1.63E-05,1.62E-05,1.61E-05,1.59E-05,1.57E-05,1.56E-05,1.54E-05,1.53E-05,1.51E-05,1.50E-05,1.48E-05,1.46E-05,1.45E-05,1.43E-05,1.40E-05,1.40E-05,1.38E-05,1.38E-05,1.36E-05,1.34E-05,1.33E-05,1.31E-05,1.30E-05,1.28E-05,1.27E-05,1.25E-05,1.25E-05,1.25E-05,1.22E-05,1.22E-05,1.21E-05,1.19E-05,1.19E-05,1.19E-05,1.18E-05,1.15E-05,1.16E-05,1.15E-05,1.13E-05,1.10E-05,1.10E-05,1.11E-05,1.06E-05,1.05E-05,1.03E-05,1.05E-05,1.02E-05,1.03E-05,1.01E-05,1.01E-05,1.02E-05,9.59E-06,9.96E-06,9.99E-06,9.59E-06,9.63E-06,9.61E-06,9.35E-06,9.47E-06,9.27E-06,9.46E-06,9.48E-06,8.92E-06,9.32E-06,9.22E-06,9.33E-06,1.01E-05,9.50E-06,9.82E-06,1.01E-05,1.02E-05,1.00E-05,9.42E-06,1.01E-05,9.68E-06,8.94E-06,8.64E-06,9.23E-06,9.07E-06,8.75E-06,1.01E-05,9.23E-06,9.93E-06,8.27E-06,9.65E-06,9.59E-06,8.92E-06,9.04E-06,9.12E-06,8.59E-06,9.56E-06,1.16E-05,8.60E-06,1.09E-05,9.21E-06,9.21E-06,1.06E-05,1.34E-05,1.30E-05,1.33E-05,1.09E-05], np.float64)

deltan=np.array([4.38E+15,4.14E+15,3.92E+15,3.70E+15,3.49E+15,3.29E+15,3.10E+15,2.91E+15,2.75E+15,2.58E+15,2.43E+15,2.29E+15,2.16E+15,2.03E+15,1.91E+15,1.80E+15,1.69E+15,1.60E+15,1.51E+15,1.41E+15,1.34E+15,1.26E+15,1.18E+15,1.12E+15,1.05E+15,9.91E+14,9.33E+14,8.76E+14,8.27E+14,7.79E+14,7.29E+14,6.92E+14,6.52E+14,6.21E+14,5.84E+14,5.50E+14,5.19E+14,4.90E+14,4.62E+14,4.37E+14,4.14E+14,3.90E+14,3.71E+14,3.55E+14,3.30E+14,3.15E+14,2.99E+14,2.81E+14,2.69E+14,2.57E+14,2.44E+14,2.27E+14,2.19E+14,2.08E+14,1.96E+14,1.84E+14,1.76E+14,1.69E+14,1.55E+14,1.47E+14,1.39E+14,1.34E+14,1.26E+14,1.22E+14,1.14E+14,1.10E+14,1.06E+14,9.57E+13,9.52E+13,9.15E+13,8.41E+13,8.10E+13,7.76E+13,7.24E+13,7.03E+13,6.59E+13,6.46E+13,6.20E+13,5.60E+13,5.61E+13,5.33E+13,5.18E+13,5.39E+13,4.84E+13,4.79E+13,4.74E+13,4.58E+13,4.33E+13,3.89E+13,3.99E+13,3.69E+13,3.25E+13,3.02E+13,3.10E+13,2.92E+13,2.70E+13,2.99E+13,2.62E+13,2.71E+13,2.15E+13,2.42E+13,2.30E+13,2.05E+13,2.00E+13,1.91E+13,1.72E+13,1.83E+13,2.13E+13,1.51E+13,1.83E+13,1.48E+13,1.41E+13,1.54E+13,1.86E+13,1.71E+13,1.67E+13,1.31E+13], np.float64)


print len(origtau)
print len(deltan)
indices1=deltan>6E14
indices2=deltan<3E15
indices=(indices1)&(indices2)
NA=8.26E15
fit=fitting(deltan[indices], origtau[indices])[0]

plot(deltan,origtau, "bo")

#lntaup, lntaun, Et = fit
#C1,C2,NA=fit
print fit
Ev=0
Ec=1.14*1.6E-19
kT=4.11E-21
Nc=2.8430E19
Nv=2.6821E19
#NA=8.26E15
range1=np.arange(0,5e15,0.5e14)

taup=fit[0]
taun=fit[1]
n1=fit[2]
p1=fit[3]
NA=fit[4]
#plot(range1[2:], ((C1 + (C2 * range1[2:]))/(NA + range1[2:])), "r-")
plot(range1[2:], (((taup*n1)+(taup*range1[2:])+(taun*p1)+(taun*NA)+(taun*range1[2:]))/(NA+range1[2:])), "r-")
#plot(range1[2:], (C0*(range1[2:]**2))+(C1*range1[2:])+C2, "r-")
plot(deltan[indices],origtau[indices], "go")
#plot(((((10**lntaup)*(Nc * np.exp((-1*(Ec-Et))/kT) + deltan)) + ((10**lntaun)*((Nv*np.exp((-1*(Et-Ev))/kT)) + NA + deltan)))/(NA + deltan)), "r-")

show()
